/// <reference types="react" />
import { SourceType } from '../../shared';
export declare const parameters: {
    docs: {
        inlineStories: boolean;
        prepareForInline: (storyFn: import("@storybook/addons").StoryFn<import("@storybook/angular").IStory>, { id, parameters }: import("@storybook/angular").StoryContext) => import("react").CElement<any, {
            wrapperRef: import("react").RefObject<unknown>;
            elementName: string;
            componentDidMount(): Promise<void>;
            render(): import("react").ReactElement<{
                ref: import("react").RefObject<unknown>;
            }, string | ((props: any) => import("react").ReactElement<any, any>) | (new (props: any) => import("react").Component<any, any, any>)>;
            context: any;
            setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{}>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
            forceUpdate(callback?: () => void): void;
            readonly props: Readonly<{}> & Readonly<{
                children?: import("react").ReactNode;
            }>;
            state: Readonly<{}>;
            refs: {
                [key: string]: import("react").ReactInstance;
            };
            shouldComponentUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): boolean;
            componentWillUnmount?(): void;
            componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
            getSnapshotBeforeUpdate?(prevProps: Readonly<{}>, prevState: Readonly<{}>): any;
            componentDidUpdate?(prevProps: Readonly<{}>, prevState: Readonly<{}>, snapshot?: any): void;
            componentWillMount?(): void;
            UNSAFE_componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
            UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
            componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
            UNSAFE_componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
        }>;
        extractArgTypes: (component: import("./types").Directive) => import("@storybook/api").ArgTypes;
        extractComponentDescription: (component: import("./types").Directive) => string;
        source: {
            type: SourceType;
            language: string;
        };
    };
};
export declare const decorators: ((storyFn: import("@storybook/addons").StoryFn<import("@storybook/angular").IStory>, context: import("@storybook/addons").StoryContext) => import("@storybook/angular").IStory)[];
