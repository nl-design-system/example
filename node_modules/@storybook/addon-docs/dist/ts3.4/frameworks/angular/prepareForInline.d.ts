import React from 'react';
import { IStory, StoryContext } from '@storybook/angular';
import { StoryFn } from '@storybook/addons';
/**
 * Uses angular element to generate on-the-fly web components and reference it with `customElements`
 * then it is added into react
 */
export declare const prepareForInline: (storyFn: StoryFn<IStory>, { id, parameters }: StoryContext) => React.CElement<any, {
    wrapperRef: React.RefObject<unknown>;
    elementName: string;
    componentDidMount(): Promise<void>;
    render(): React.ReactElement<{
        ref: React.RefObject<unknown>;
    }, string | ((props: any) => React.ReactElement<any, any>) | (new (props: any) => React.Component<any, any, any>)>;
    context: any;
    setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{}>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
    forceUpdate(callback?: () => void): void;
    readonly props: Readonly<{}> & Readonly<{
        children?: React.ReactNode;
    }>;
    state: Readonly<{}>;
    refs: {
        [key: string]: React.ReactInstance;
    };
    shouldComponentUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): boolean;
    componentWillUnmount?(): void;
    componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
    getSnapshotBeforeUpdate?(prevProps: Readonly<{}>, prevState: Readonly<{}>): any;
    componentDidUpdate?(prevProps: Readonly<{}>, prevState: Readonly<{}>, snapshot?: any): void;
    componentWillMount?(): void;
    UNSAFE_componentWillMount?(): void;
    componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
    UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
    componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
    UNSAFE_componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<{}>, nextContext: any): void;
}>;
