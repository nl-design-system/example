function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.get-prototype-of.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.promise.js";
import "regenerator-runtime/runtime.js";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from 'react';
import { logger } from '@storybook/client-logger';
var customElementsVersions = {};
/**
 * Uses angular element to generate on-the-fly web components and reference it with `customElements`
 * then it is added into react
 */

export var prepareForInline = function prepareForInline(storyFn, _ref) {
  var _temp;

  var id = _ref.id,
      parameters = _ref.parameters;
  // Upgrade story version in order that the next defined component has a unique key
  customElementsVersions[id] = customElementsVersions[id] !== undefined ? customElementsVersions[id] + 1 : 0;
  var customElementsName = "".concat(id, "_").concat(customElementsVersions[id]);
  var Story = (_temp = /*#__PURE__*/function (_React$Component) {
    _inherits(Story, _React$Component);

    var _super = _createSuper(Story);

    function Story(props) {
      var _this;

      _classCallCheck(this, Story);

      _this = _super.call(this, props);
      _this.wrapperRef = void 0;
      _this.elementName = void 0;
      _this.wrapperRef = /*#__PURE__*/React.createRef();
      return _this;
    }

    _createClass(Story, [{
      key: "componentDidMount",
      value: function () {
        var _componentDidMount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _yield$import$catch, ElementRendererService;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return import('@storybook/angular/element-renderer').catch(function (error) {
                    logger.error('Check the documentation to activate `inlineStories`. The `@angular/elements` & `@webcomponents/custom-elements` dependencies are required.');
                    throw error;
                  });

                case 2:
                  _yield$import$catch = _context.sent;
                  ElementRendererService = _yield$import$catch.ElementRendererService;
                  _context.t0 = customElements;
                  _context.t1 = customElementsName;
                  _context.next = 8;
                  return new ElementRendererService().renderAngularElement({
                    storyFnAngular: storyFn(),
                    parameters: parameters
                  });

                case 8:
                  _context.t2 = _context.sent;

                  _context.t0.define.call(_context.t0, _context.t1, _context.t2);

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function componentDidMount() {
          return _componentDidMount.apply(this, arguments);
        }

        return componentDidMount;
      }()
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(customElementsName, {
          ref: this.wrapperRef
        });
      }
    }]);

    return Story;
  }(React.Component), _temp);
  return /*#__PURE__*/React.createElement(Story);
};